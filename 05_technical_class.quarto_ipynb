{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Технические детали: командная строка, инструменты `hfst`\n",
        "\n",
        "## Командная оболочка\n",
        "\n",
        "Когда вы открываете линуксовскую командную строку, чаще всего вы сталкиваетесь с интерпретатором `bash` –-- это командная оболочка, которая позволяет отдавать команды вашей операционной системе и компьютеру. В данных материалах мы используем обобщенное `shell`, включающее в себя разные командные оболочка. Так как обычно команды в командной строке исполняются сразу, знак доллара традиционно используют для обозначения строчки с командой:\n",
        "\n",
        "```{{shell}}\n",
        "$ echo \"hi all\"\n",
        "\n",
        "hi all\n",
        "```\n",
        "\n",
        "Разумеется, когда дело доходит до больших и сложных программ, то их записывают в скрипты, которым обычно дают расширение `.sh` и начинают с [шебанга](https://en.wikipedia.org/wiki/Shebang_(Unix)). Вот пример простой программы:\n",
        "\n",
        "```my_script.sh\n",
        "#!/bin/bash\n",
        "\n",
        "echo \"Please enter your name: \"\n",
        "read name\n",
        "echo \"Nice to meet you $name\"\n",
        "```\n",
        "\n",
        "Если записать эту программу в файл `my_script.sh`, то ее потом можно запустить следующей командой:\n",
        "\n",
        "```{{shell}}\n",
        "$ sh my_script.sh\n",
        "```\n",
        "\n",
        "## Программы для команадной строки\n",
        "\n",
        "Для командной строки написано очень много разных программ. Важно понимать, что их все (естественно, после установки, если это необходимо) можно запустить, набрав в консоли название программы. Начнем наше знакомство с программы `ls`, которая перечисляет (list) содержание папок:\n",
        "\n",
        "```{{shell}}\n",
        "$ ls\n",
        "\n",
        "01_00_stemmers.png                  01_09_first_transducer.png\n",
        "01_01_light_switch.jpg              01_10_morphology.png\n",
        "01_02_light_switch_automaton.png    01_11_transducer_composition.png\n",
        "01_03_turnstile.jpg                 01_12_morphology2.png\n",
        "01_04_turnstile_automaton.png       03_01_Russita-feeding.png\n",
        "01_05_elephant.png                  03_02_Russita-bleeding.png\n",
        "01_06_elephant_short.png            03_03_Russita-counterfeeding.png\n",
        "01_07_multiple_words.png            03_04_Russita-counterbleeding.png\n",
        "01_08_multiple_words_optimized.png\n",
        "```\n",
        "\n",
        "У большинства программ есть некоторые аргументы (почему-то их принято называть флагами), которые перечисляют после минуса.\n",
        "\n",
        "```{{shell}}\n",
        "$ ls -l\n",
        "\n",
        "total 2636\n",
        "-rw-rw-r-- 1 agricolamz agricolamz 122183 Jan  6 18:52 01_00_stemmers.png\n",
        "-rw-rw-r-- 1 agricolamz agricolamz 121071 Feb 18  2022 01_01_light_switch.jpg\n",
        "-rw-rw-r-- 1 agricolamz agricolamz 156956 Jan  6 07:45 01_02_light_switch_automaton.png\n",
        "-rw-rw-r-- 1 agricolamz agricolamz  18075 Feb 18  2022 01_03_turnstile.jpg\n",
        "-rw-rw-r-- 1 agricolamz agricolamz 167801 Jan  6 07:47 01_04_turnstile_automaton.png\n",
        "-rw-rw-r-- 1 agricolamz agricolamz 200090 Jan  6 07:50 01_05_elephant.png\n",
        "-rw-rw-r-- 1 agricolamz agricolamz 106598 Jan  6 07:51 01_06_elephant_short.png\n",
        "-rw-rw-r-- 1 agricolamz agricolamz 226555 Jan  6 07:52 01_07_multiple_words.png\n",
        "-rw-rw-r-- 1 agricolamz agricolamz 139834 Jan  6 07:58 01_08_multiple_words_optimized.png\n",
        "-rw-rw-r-- 1 agricolamz agricolamz 132286 Jan  6 16:02 01_09_first_transducer.png\n",
        "-rw-rw-r-- 1 agricolamz agricolamz 117095 Jan  6 17:15 01_10_morphology.png\n",
        "-rw-rw-r-- 1 agricolamz agricolamz 253314 Jan  6 18:32 01_11_transducer_composition.png\n",
        "-rw-rw-r-- 1 agricolamz agricolamz 261112 Jan 12 18:20 01_12_morphology2.png\n",
        "-rwxr-xr-x 1 agricolamz agricolamz 159091 Jan 13  2017 03_01_Russita-feeding.png\n",
        "-rwxr-xr-x 1 agricolamz agricolamz 150034 Jan 13  2017 03_02_Russita-bleeding.png\n",
        "-rwxr-xr-x 1 agricolamz agricolamz 140454 Jan 13  2017 03_03_Russita-counterfeeding.png\n",
        "-rwxr-xr-x 1 agricolamz agricolamz 193216 Jan 13  2017 03_04_Russita-counterbleedin\n",
        "```\n",
        "\n",
        "- `cd`\n",
        "- `wc -l`\n",
        "- `grep`\n",
        "- `|`\n",
        "- `rm``\n",
        "\n",
        "\n",
        "## Компеляция трансдьюсеров\n",
        "\n",
        "Теперь попробуем шаг за шагом скомпилировать наш морфологический трансдьюсор, используя программы `lexd` и `hfst-twolc`. Первым делом нужно установить необходимые программы:\n",
        "\n",
        "```{{shell}}\n",
        "$ curl -s https://apertium.projectjj.com/apt/install-nightly.sh | sudo bash\n",
        "$ sudo apt-get install hfst lexd\n",
        "```\n",
        "\n",
        "Создадим файлы `example.lexd` и `example.twol`:\n",
        "\n",
        "```{{lexd}}\n",
        "PATTERNS\n",
        "Noun (Suffix[-adj] | (Suffix[adj] Inflection))?\n",
        "\n",
        "LEXICON Noun\n",
        "ночь\n",
        "печь\n",
        "\n",
        "LEXICON Suffix\n",
        "<dim>:ка\n",
        "<adj>:н[adj]\n",
        "\n",
        "LEXICON Inflection\n",
        "<m><sg><nom>:ой\n",
        "```\n",
        "\n",
        "```{{twol}}\n",
        "Alphabet\n",
        "  а е й к н о п ч ь ь:0;\n",
        "\n",
        "Rules\n",
        "\n",
        "\"чк чн пишется без ь\"\n",
        "! например, ночьной -> ночной или печька -> печка\n",
        "\n",
        "ь:0 <=> _ к;\n",
        "        _ н;\n",
        "```\n",
        "\n",
        "Скомпилируем `.lexd` файл:\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "```{shell}\n",
        "$ lexd example.lexd\n",
        "\n",
        "0\t1\tн\tн\t0.000000\t\n",
        "0\t2\tп\tп\t0.000000\t\n",
        "1\t3\tо\tо\t0.000000\t\n",
        "2\t3\tе\tе\t0.000000\t\n",
        "3\t4\tч\tч\t0.000000\t\n",
        "4\t5\tь\tь\t0.000000\t\n",
        "5\t6\t<dim>\tк\t0.000000\t\n",
        "5\t7\t<adj>\tн\t0.000000\t\n",
        "6\t8\t@0@\tа\t0.000000\t\n",
        "7\t9\t<m>\tо\t0.000000\t\n",
        "9\t10\t<sg>\tй\t0.000000\t\n",
        "10\t8\t<nom>\t@0@\t0.000000\t\n",
        "5\t0.000000\n",
        "8\t0.000000 \n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "Мы видим, что программа `lexd` преобразовала наш файл `example.lexd` в трансдьюсер в ATT формате (см. @sec-automata). Так как основной формат все равно завязан на программу `hfst`, так что можно перенаправить ATT в команду `hfst-txt2fst`. Флаг `-o` отвечает за имя файла, куда записать результат, так что пользователь может задать любое свое имя отличное от `lexd.hfst`.\n",
        "\n",
        "```{{shell}}\n",
        "$ lexd example.lexd | hfst-txt2fst -o lexd.hfst\n",
        "```\n",
        "\n",
        "В результате был получен бинарный файл `.hfst`, который используется для дальнейшей работы. Например, можно использовать функцию `hfst-lookup` для того, чтобы обратиться к трансдьюсеру.\n",
        "\n",
        "```{{shell}}\n",
        "$ echo \"ночь\" | hfst-lookup lexd.hfst \n",
        "```\n",
        "\n",
        "\n",
        "## Другие инструменты `hfst`"
      ],
      "id": "d587fcac"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}