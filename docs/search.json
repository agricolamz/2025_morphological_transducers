[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Конечные автоматы в морфологическом анализе 2024/2025",
    "section": "",
    "text": "Введение\nДанные материалы являются конспектом курса Т. Б. Казаковой и Г. А. Мороза ‘Конечные автоматы в морфологическом анализе’ 2024–2025. Данный курс предоставляет углубленное изучение применения конечных автоматов в морфологическом анализе. Конечные автоматы используются для моделирования морфологии языков, особенно малоресурсных. Курс охватывает основные этапы создания морфологического анализатора в системе lexd и twol, проверку его на корпусах, взвешивание трансдьюсера для дизамбигуации. В качестве иллюстративного материала будут использоваться лингвистические задачи и реальные примеры из практики преподавателей. В нашем курсе мы стараемся предложить стратегии компьютерного правилого моделирвания морфологических и морфонологически проблем, стараясь охватить явления интересные с точки зрения теоретической лингвистики.\nВ курсе будет 6 домашних заданий и экзамен. Все домашние задания имеют одинаковый вес. Экзамен весит 0.4. За курс предусмотрен автомат, если студента устраивает накопленная оценка.",
    "crumbs": [
      "Введение"
    ]
  },
  {
    "objectID": "01_introduction_to_transducers.html",
    "href": "01_introduction_to_transducers.html",
    "title": "1  Автоматический морфологический анализ",
    "section": "",
    "text": "1.1 Приведение к основе (stemming)\nМорфологический анализ, как его обычно видят лингвисты, обычно включает в себя несколько вещей:\nВ зависимости от целей люди делают акцент на разные аспекты морфологического анализа. Для многих NLP задач полезным является приведение к начальной форме, лингвистический корпусной анализ практически невозможен без заранее определенных морфологических форм, и все три необходимы для представления языкового материала в научной работе. Также стоит помнить, что для разных целей могут быть важны разные категории: например, для согласования может быть важна несловоизменительная для существительных (чаще всего) категория рода.\nДостаточно широкое применение в ранюю эпоху NLP получили методы, которые позволяют привести словоформы к основе или квазиоснове. Эта процедура помогала уменьшить разнообразие форм в тексте, что облегчало поиск и извлечение информации.\nTBC\n(Porter 1980)\n(Singh и Gupta 2017)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Автоматический морфологический анализ</span>"
    ]
  },
  {
    "objectID": "01_introduction_to_transducers.html#много-данных",
    "href": "01_introduction_to_transducers.html#много-данных",
    "title": "1  Автоматический морфологический анализ",
    "section": "1.2 Много данных",
    "text": "1.2 Много данных\nОбычно, если много данных, люди используют нейросети. Для морфологического анализа русского языка их использовали в следующих работах (Arefyev, Gratsianova, и Popov 2018; Sorokin и Kravtsova 2018; E. Bolshakova и Sapin 2019; EI Bolshakova и Sapin 2019; E. I. Bolshakova и Sapin 2020; Garipov, Morozov, и Glazkova 2023). Используются разные архитектуры:\n\ncвёрточные нейронные сеть (convolutional neural network, CNN);\nдеревья решения с градиентным бустингом (decision trees with gradient boosting);\nдвунаправленная длинная цепь элементов краткосрочной памяти (Biderectional long short-term memory network, Bi-LSTM);\nи другие.\n\nДругой важный проект, который можно упомянуть в этом разделе: UDPipe — проект, основанный на размечанных в формате Universal Dependencies трибанках большого количества языков (Straka 2018). Отметим, что их задача амбициознее: они строят модель, совмещающая морфологический парсер и синтаксический парсер дерева зависимостей. Внутри: длинная цепь элементов краткосрочной памяти (LSTM), которая работает на основе векторного представления слов.\nТакже стоит упомянуть проект Morfessor, в котором используют скрытые марковские цепи (HMM) (Grönroos и др. 2014).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Автоматический морфологический анализ</span>"
    ]
  },
  {
    "objectID": "01_introduction_to_transducers.html#морфологические-трансдьюссеры",
    "href": "01_introduction_to_transducers.html#морфологические-трансдьюссеры",
    "title": "1  Автоматический морфологический анализ",
    "section": "1.3 Морфологические трансдьюссеры",
    "text": "1.3 Морфологические трансдьюссеры\n\n1.3.1 Конечные автоматы\nТеория автоматов — это дисциплина на стыке математики и компьютерных наук, которая появилась в XX веке. Первые конечных автоматов были предложены в работах (Mealy 1955; Moore 1956).\nПод автоматами мы понимаем абстрактные машины, которые принимают разные состояния, а изменение состояний вызывается некоторым действием:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nМы не будем давать формального определения конечных автоматов, а перечислим свойства:\n\nалфавит, который автомат понимает;\nконечное количество состояний;\nпереходы между состояниями;\nодно начальное состояние (часто обозначют нулем);\nнабор конечных состояний (часто обозначают двойным кружочком).\n\nКонечные автоматы можно использовать для верефикации поданного на вход слов:\n\n\n\n\n\n\n\n\n\n\n\n\n\nArefyev, N. V., T. Y. Gratsianova, и K. P. Popov. 2018. «Morphological segmentation with sequence to sequence neural network». В KКомпьютерная лингвистика и интеллектуальные технологии, 85–95.\n\n\nBolshakova, E. I., и A. S. Sapin. 2020. «An Experimental Study of Neural Morpheme Segmentation Models for Russian Word Forms.» В CMCL, 79–89.\n\n\nBolshakova, EI, и AS Sapin. 2019. «Comparing models of morpheme analysis for Russian words based on machine learning». В Компьютерная лингвистика и интеллектуальные технологии, 104–13.\n\n\nBolshakova, E., и A. Sapin. 2019. «Bi-LSTM model for morpheme segmentation of Russian words». В Artificial Intelligence and Natural Language: 8th Conference, AINL 2019, Tartu, Estonia, November 20–22, 2019, Proceedings 8, 151–60. Springer.\n\n\nGaripov, T., D. Morozov, и A. Glazkova. 2023. «Generalization ability of CNN-based Morpheme Segmentation». В 2023 Ivannikov Ispras Open Conference (ISPRAS), 58–62. IEEE.\n\n\nGrönroos, S.-A., S. Virpioja, P. Smit, и M. Kurimo. 2014. «Morfessor FlatCat: An HMM-based method for unsupervised and semi-supervised learning of morphology». В Proceedings of COLING 2014, the 25th International Conference on Computational Linguistics: Technical Papers, 1177–85.\n\n\nMealy, G. H. 1955. «A method for synthesizing sequential circuits». The Bell System Technical Journal 34 (5): 1045–79.\n\n\nMoore, E. F. 1956. «Gedanken-experiments on sequential machines». Automata studies 34: 129–53.\n\n\nPorter, M. F. 1980. «An algorithm for suffix stripping». Program 14 (3): 130–37. https://doi.org/10.1108/eb046814.\n\n\nSingh, J., и V. Gupta. 2017. «A systematic review of text stemming techniques». Artificial Intelligence Review 48: 157–217.\n\n\nSorokin, Alexey, и Anastasia Kravtsova. 2018. «Deep convolutional networks for supervised morpheme segmentation of Russian language». В Artificial Intelligence and Natural Language: 7th International Conference, AINL 2018, St. Petersburg, Russia, October 17–19, 2018, Proceedings 7, 3–10. Springer.\n\n\nStraka, Milan. 2018. «UDPipe 2.0 prototype at CoNLL 2018 UD shared task». В Proceedings of the CoNLL 2018 shared task: Multilingual parsing from raw text to universal dependencies, 197–207.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Автоматический морфологический анализ</span>"
    ]
  },
  {
    "objectID": "02_introduction_to_lexd.html",
    "href": "02_introduction_to_lexd.html",
    "title": "2  Введение в lexd",
    "section": "",
    "text": "2.1 Техническое введение\nВ данном разделе мы обсуждаем синтаксис программы lexd (Swanson и Howell 2021). Данная программа работает в связке\nЭто консольная программа, работающая на юниксоподобных системах. Чтобы избежать сложностей на начальных этапах курса, мы решили вначале познакомиться с синтаксисом lexd и попробовать описывать разные языковые явления, не затрудняя всех установкой и запуском данных программ у себя на компьютере. В связи с этим мы предлагаем выучить следующие четыре команды, которые будут работать на операционных системах Linux, основанных на Debian/Ubuntu, и в Google Colab:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Введение в `lexd`</span>"
    ]
  },
  {
    "objectID": "02_introduction_to_lexd.html#техническое-введение",
    "href": "02_introduction_to_lexd.html#техническое-введение",
    "title": "2  Введение в lexd",
    "section": "",
    "text": "с бесплатном програмном обеспечении с открытым исходным кодом Helsinki Finite-State Tookit hfst (Lindén и др. 2011);\nаналогичным инструментом от Apertium lttoolbox (Ortiz Rojas, Forcada, и Ramı́rez Sánchez 2005).\n\n\n\nскачиваем интсрукции для установки lexd и hfst и дальнейшей работы с ними, записанные в простом текстовом файле, которые можно прочитать, если открыть ссылку из команды. Команда make запускает установку. Для того, чтобы это работало в Google Colab нужно перед командой нужно поставить восклицательный знак: !curl .... Знак доллара означает, что дальше следует команда командной строки, не надо его никуда копировать.\n\n```{bash}\n$ curl https://raw.githubusercontent.com/agricolamz/2025_morphological_transducers/refs/heads/main/task_tests/Makefile -o Makefile; make\n```\n\nдальше мы ожидаем, что вы создадите в коллабе или у себя на компьютере (если у вас Linux), файл с названием task.lexd. В Google Colab для этого достаточно вставить первой строкой кодового блока %%writefile task.lexd. Вот пример такого файла:\n\n```{lexd}\nPATTERNS\nVerbRoot VerbInfl\n\nLEXICON VerbRoot\nsing&lt;v&gt;:sing\nwalk&lt;v&gt;:walk\ndance&lt;v&gt;:dance\n\nLEXICON VerbInfl\n&lt;pres&gt;:\n&lt;pres&gt;&lt;3&gt;&lt;sg&gt;:s\n```\n\nПосле того, как вы установили нужные программы и создали файл, можно посмотреть формы и разборы, которые генерируются трансдьюссером. Это можно сделать следующей командой (не забудьте поставить восклицательный знак перед make в Google Colab):\n\n```{bash}\n$ make forms\n\nsing&lt;v&gt;&lt;pres&gt;:sing\nsing&lt;v&gt;&lt;pres&gt;&lt;3&gt;&lt;sg&gt;:sings\nwalk&lt;v&gt;&lt;pres&gt;:walk\nwalk&lt;v&gt;&lt;pres&gt;&lt;3&gt;&lt;sg&gt;:walks\ndance&lt;v&gt;&lt;pres&gt;:dance\ndance&lt;v&gt;&lt;pres&gt;&lt;3&gt;&lt;sg&gt;:dances\n```\n\nВ ходе курса мы будем разбирать разные лингвистические задачи. У каждой задачи есть номер и автоматический тест, который его проверяет. Чтобы запустить автоматическую проверку следует ввести команду, где первое число – номер раздела, а второе число – номер задачи. Например, для того, чтобы проверить, работает ли проверка задания попробуйте запустить следующую команду:\n\n```{bash}\n$ make test_02_01\n```\n\nЧтобы окончательно посмотреть все варианты, попробуйте изменить последнюю строчку файла task.lexd на &lt;pres&gt;&lt;3&gt;&lt;sg&gt;:S и снова перезапустить команду:\n\n```{bash}\n$ make test_02_01\n```",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Введение в `lexd`</span>"
    ]
  },
  {
    "objectID": "02_introduction_to_lexd.html#программа-lexd",
    "href": "02_introduction_to_lexd.html#программа-lexd",
    "title": "2  Введение в lexd",
    "section": "2.2 Программа lexd",
    "text": "2.2 Программа lexd\nУ программы lexd есть подробный туториал, так что данный раздел во многом опирается на него. Давайте подробнее рассмотрим lexd файл, который мы видели в прошлом разделе:\n```{lexd}\n1PATTERNS\nVerbRoot VerbInfl   \n\n2LEXICON VerbRoot\n3sing&lt;v&gt;:sing\nwalk&lt;v&gt;:walk\ndance&lt;v&gt;:dance\n\n4LEXICON VerbInfl\n5&lt;pres&gt;:\n6&lt;pres&gt;&lt;3&gt;&lt;sg&gt;:s\n```\n\n1\n\nОбязательный раздел PATTERNS, в котором каждая строка сообщает, как могут соединяться элементы из разных групп лексикона.\n\n2\n\nГруппа лексикона которая состоит из слова LEXICON и имя, под которым данная группа появляется в разделе PATTERNS\n\n3\n\nНаполнение группы. Первым идет разбор, а потом после двоеточия языковой материал. Морфологические теги принято записывать в треугольных скобках.\n\n4\n\nВторая группа LEXICON и ее имя.\n\n5\n\nПример нулевой морфемы.\n\n6\n\nПример морфемы с несколькими морфологическими тегами.\n\n\nОтметим, что можно создавать свои именнованные подразделы PATTERN, которые потом можно использовать в разделе PATTERNS.\n\n\n\n\n\n\nЗадание 02_02\n\n\n\nНиже представлен фрагмент ицаринской (даргинские, нахско-дагестанские) парадигмы из (Sumbatova и Mutalov 2003). Попробуйте смоделировать ее при помощи lexd. Для корректного моделирования формы sup.lat нужна морфонология, так что при моделировании используйте форму в скобках. При моделировании придется покривить душой: -b в формах ess и dir — инфикс классного показателя. Помните, что каждый морфологический тег следует обрамлять в отдельные треугольные скобки, например, sːika&lt;n&gt;&lt;ant&gt;&lt;dir&gt;:sːikasabal. Для ориентации в нашем lexd файле 26 строк.\n\n\n\nформа\nкозел\nмедведь\n\n\n\n\nabs\nq’atsa\nsːika\n\n\nerg\nq’atsal\nsːikal\n\n\ngen\nq’atsala\nsːikala\n\n\ncom\nq’atsatsːilli\nsːikatsːilli\n\n\nsup.lat\nq’atsaj (&lt; q’atsaji)\nsːikaj (&lt; sːikaji)\n\n\nsup.ess\nq’atsajib\nsːikajib\n\n\nsup.dir\nq’atsajibal\nsːikajibal\n\n\nsup.el\nq’atsajir\nsːikajir\n\n\nsub.lat\nq’atsaʁu\nsːikaʁu\n\n\nsub.ess\nq’atsaʁub\nsːikaʁub\n\n\nsub.dir\nq’atsaʁubal\nsːikaʁubal\n\n\nsub.el\nq’atsaʁur\nsːikaʁur\n\n\nant.lat\nq’atsasa\nsːikasa\n\n\nant.ess\nq’atsasab\nsːikasab\n\n\nant.dir\nq’atsasabal\nsːikasabal\n\n\nant.el\nq’atsasar\nsːikasar\n\n\npost.lat\nq’atsaha\nsːikaha\n\n\npost.ess\nq’atsahab\nsːikahab\n\n\npost.dir\nq’atsahabal\nsːikahabal\n\n\npost.el\nq’atsahar\nsːikahar\n\n\nin.lat\nq’atsatsːi\nsːikatsːi\n\n\nin.ess\nq’atsatsːib\nsːikatsːib\n\n\nin.dir\nq’atsatsːibal\nsːikatsːibal\n\n\nin.el\nq’atsatsːir\nsːikatsːir\n\n\n\n\n\n\n2.2.1 Теги\n\n\n\n\n\n\nЗадание 02_03\n\n\n\nНиже представлен фрагмент финской парадигмы (Karlsson 2013), как видно, здесь слова двух словоизменительных типов. Попробуйте смоделировать представленную парадигму, используя теги.\n\n\n\nglosses\nзал\nобщежитие\nдверь\nзима\n\n\n\n\nnom.sg\nsali\nhostelli\novi\ntalvi\n\n\nacc.sg\nsali\nhostelli\novi\ntalvi\n\n\ngen.sg\nsalin\nhostellin\noven\ntalven\n\n\nprt.sg\nsalia\nhostellia\novea\ntalvea\n\n\nin.ess.sg\nsalissa\nhostellissa\novessa\ntalvessa\n\n\nin.abl.sg\nsalista\nhostellista\novesta\ntalvesta\n\n\nat.ess.sg\nsalilla\nhostellilla\novella\ntalvella\n\n\nat.abl.sg\nsalilta\nhostellilta\novelta\ntalvelta\n\n\nat.all.sg\nsalille\nhostellille\novelle\ntalvelle\n\n\nfrml.sg\nsalina\nhostellina\novena\ntalvena\n\n\ntrans.sg\nsaliksi\nhostelliksi\noveksi\ntalveksi\n\n\npriv.sg\nsalitta\nhostellitta\novetta\ntalvetta\n\n\n\n\n\n\n\n2.2.2 Операции в части Pattern\n\n\n2.2.3 Инфиксы\n\n\n\n\nKarlsson, F. 2013. Finnish: An essential grammar. Routledge.\n\n\nLindén, K., E. Axelson, S. Hardwick, T. A. Pirinen, и M. Silfverberg. 2011. «Hfst—framework for compiling and applying morphologies». В Systems and Frameworks for Computational Morphology: Second International Workshop, SFCM 2011, Zurich, Switzerland, August 26, 2011. Proceedings 2, 67–85. Springer.\n\n\nOrtiz Rojas, S., M. L. Forcada, и G. Ramı́rez Sánchez. 2005. «Construcción y minimización eficiente de transductores de letras a partir de diccionarios con paradigmas». Procesamiento del lenguaje natural 35: 51–57.\n\n\nSumbatova, N. R., и R. O. Mutalov. 2003. A grammar of Itsari Dargwa. Muenchen: Lincom Europa.\n\n\nSwanson, D., и N. Howell. 2021. «Lexd: A finitestate lexicon compiler for non-suffixational morphologies». В Multilingual Facilitation, 133–46.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Введение в `lexd`</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "Список литературы",
    "section": "",
    "text": "Arefyev, N. V., T. Y. Gratsianova, and K. P. Popov. 2018.\n“Morphological Segmentation with Sequence to Sequence Neural\nNetwork.” In KКомпьютерная Лингвистика и Интеллектуальные\nТехнологии, 85–95.\n\n\nBolshakova, E. I., and A. S. Sapin. 2020. “An Experimental Study\nof Neural Morpheme Segmentation Models for Russian Word Forms.”\nIn CMCL, 79–89.\n\n\nBolshakova, EI, and AS Sapin. 2019. “Comparing Models of Morpheme\nAnalysis for Russian Words Based on Machine Learning.” In\nКомпьютерная Лингвистика и Интеллектуальные Технологии, 104–13.\n\n\nBolshakova, E., and A. Sapin. 2019. “Bi-LSTM Model for Morpheme\nSegmentation of Russian Words.” In Artificial Intelligence\nand Natural Language: 8th Conference, AINL 2019, Tartu, Estonia,\nNovember 20–22, 2019, Proceedings 8, 151–60. Springer.\n\n\nGaripov, T., D. Morozov, and A. Glazkova. 2023. “Generalization\nAbility of CNN-Based Morpheme Segmentation.” In 2023\nIvannikov Ispras Open Conference (ISPRAS), 58–62. IEEE.\n\n\nGrönroos, S.-A., S. Virpioja, P. Smit, and M. Kurimo. 2014.\n“Morfessor FlatCat: An\nHMM-Based Method for Unsupervised and Semi-Supervised\nLearning of Morphology.” In Proceedings of COLING 2014, the\n25th International Conference on Computational Linguistics: Technical\nPapers, 1177–85.\n\n\nKarlsson, F. 2013. Finnish: An Essential Grammar. Routledge.\n\n\nLindén, K., E. Axelson, S. Hardwick, T. A. Pirinen, and M. Silfverberg.\n2011. “Hfst—Framework for Compiling and Applying\nMorphologies.” In Systems and Frameworks for Computational\nMorphology: Second International Workshop, SFCM 2011, Zurich,\nSwitzerland, August 26, 2011. Proceedings 2, 67–85. Springer.\n\n\nMealy, G. H. 1955. “A Method for Synthesizing Sequential\nCircuits.” The Bell System Technical Journal 34 (5):\n1045–79.\n\n\nMoore, E. F. 1956. “Gedanken-Experiments on Sequential\nMachines.” Automata Studies 34: 129–53.\n\n\nOrtiz Rojas, S., M. L. Forcada, and G. Ramı́rez Sánchez. 2005.\n“Construcción y Minimización Eficiente\nde Transductores de Letras a Partir de Diccionarios Con\nParadigmas.” Procesamiento Del Lenguaje Natural 35:\n51–57.\n\n\nPorter, M. F. 1980. “An Algorithm for Suffix Stripping.”\nProgram 14 (3): 130–37. https://doi.org/10.1108/eb046814.\n\n\nSingh, J., and V. Gupta. 2017. “A Systematic Review of Text\nStemming Techniques.” Artificial Intelligence Review 48:\n157–217.\n\n\nSorokin, Alexey, and Anastasia Kravtsova. 2018. “Deep\nConvolutional Networks for Supervised Morpheme Segmentation of Russian\nLanguage.” In Artificial Intelligence and Natural Language:\n7th International Conference, AINL 2018, St. Petersburg, Russia, October\n17–19, 2018, Proceedings 7, 3–10. Springer.\n\n\nStraka, Milan. 2018. “UDPipe 2.0 Prototype at CoNLL\n2018 UD Shared Task.” In Proceedings of the\nCoNLL 2018 Shared Task: Multilingual Parsing from Raw Text to Universal\nDependencies, 197–207.\n\n\nSumbatova, N. R., and R. O. Mutalov. 2003. A Grammar of\nItsari Dargwa. Muenchen: Lincom Europa.\n\n\nSwanson, D., and N. Howell. 2021. “Lexd: A Finitestate Lexicon\nCompiler for Non-Suffixational Morphologies.” In Multilingual\nFacilitation, 133–46.",
    "crumbs": [
      "Список литературы"
    ]
  }
]