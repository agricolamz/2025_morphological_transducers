# Введение в `twol`: (мор)фонология

## Фонологическое введение

Преобладающая фонологическая теория в XX веке --- генеративная фонология [@chomsky1968]. Согласно этой теории существует два представления: глубинное (underlying/phonological representation) и поверхностное (surface form, phonetic representation). Фонология в этой теории сводится к набору линейено упорядоченных правил, которые применяются циклически, преобразуя результат работы синтаксической деревации в фонетические цепочки.

(@) глубинное представление > фонологическое правило 1 > фонологическое правило 2 > ... > поверхностное представление.

Из-за того, что правила в этой теории строго упорядочены возникают случаи, когда правила взаимодействуют друг с другом. Классификация таких случаев приводится в работе [@kiparsky1982]:

- питающий порядок (feeding). Так называют порядок, при котором применение одного правила увеличивает количество контекстов применение другого правила, так что другое правило срабатывает. [^feeding]
- блокирующий порядок (bleeding). Так называют порядок, при котором применение одного правила уменьшает количество контекстов применения другого правила, так что другое правило не срабатывает. [^bleedong]
- противопитающий порядок (counterfeeding). Так называют порядок, при котором применение одного правила увеличивает
количество контекстов применение другого правила, однако другое правило не срабатывает.
- противоблокирующий порядок (counterbleeding). Так называют порядок, при котором применение одного правила уменьшает
количество контекстов применения другого правила, однако другое правило все равно срабатывает.

[^feeding]: Вот пример питающего порядка из бразильского португальского (индоевропейские).

    | правило       | форма      | транскрипция      | глосса       |
    |---------------|------------|-------------------|--------------|
    | палатализация | bato       | [bá**t**u]        | бить-1sg     |
    | палатализация | bate       | [bá**tʃ**i]       | бить-3sg     |
    | палатализация | ardo       | [áɾ**d**u]        | жечь-1sg     |
    | палатализация | arde       | [áɾ**dʒ**i]       | жечь-3sg     |
    | эпентеза i    | pacto      | [pák**i**tu]      | соглашение   |
    | эпентеза i    | captar     | [kap**i**táɾ]     | взять в плен |
    | эпентеза i    | psicologia | [p**i**sikoloʒíɐ] | психология   |
    
    А вот взаимодействие правил:
    
    |               | /kaptáɾ/ <br> взять в плен | /áɾdi/ <br> жечь-3sg | /advɛ́χsu/ <br> враждебный | /futbɔ́w/ <br> футбол |
    |---------------|:--------------------------:|:--------------------:|:-------------------------:|:--------------------:|
    | эпентеза I    |           kapitáɾ          |          ---         |          adivɛ́χsu         |        futibɔ́w       |
    | палатализация |             ---            |         áɾdʒi        |         adʒivɛ́χsu         |       futʃibɔ́w       |

[^bleedong]: Вот пример питающего порядка из литовского (индоевропейские).

    | правило    | транскрипция         | перевод   |
    |------------|----------------------|-----------|
    | эпентеза i | [at-koːpʲtʲi]        | прийти    |
    | эпентеза i | [atʲ**i**-tʲeisʲtʲi] | присудить |
    | эпентеза i | [ap-kalʲbʲetʲi]      | оговорить |
    | эпентеза i | [apʲ**i**-putʲi]     | подгнить  |
    | озвончение | [at-praʃʲiːtʲi]      | спросить  |
    | озвончение | [a**d**-gautʲi]      | вернуть   |
    | озвончение | [ap-ʃaukjtji]        | объявить  |
    | озвончение | [a**b**-gautji]      | обмануть  |
    
    А вот взаимодействие правил:
    
    |            | /ap-putʲi/ <br> подгнить | /at-gautʲi/ <br> вернуть | /at-duotʲi/ <br> отдать | /ap-bʲekʲtʲi/ <br> обежать |
    |------------|:------------------------:|:------------------------:|:-----------------------:|:--------------------------:|
    | эпентеза i |        apʲi-putʲi        |            ---           |       atʲi-duotʲi       |        apʲi-bʲekʲtʲi       |
    | озвончение |            ---           |         ad-gautʲi        |           ---           |             ---            |


Вот комиксы, которые по нашей задумке должны дополнительно иллюстрировать разницу между разными порядками.

```{r}
#| layout-ncol: 2

knitr::include_graphics("images/03_01_Russita-feeding.png")
knitr::include_graphics("images/03_02_Russita-bleeding.png")
knitr::include_graphics("images/03_03_Russita-counterfeeding.png")
knitr::include_graphics("images/03_04_Russita-counterbleeding.png")
```

## Двухуровневая фонология/морфология

Двухуровневая фонология/морфология (two level morphology) была разработана в диссертации [@koskenniemi1983]. Стоит отметить, что мы используем данный формализм для моделирования (мор)фонологических правил, однако данный формализм называют двухуровневой морфологией (в том числе и сам автор). Вообще, еще в 1972 вышла диссертация [@johnson1972], в которой автор указывал на некоторые недостатки последовательности фонологических правил, которые были приняты в генеративной фонологии, а также доказывал, что любую последовательность правил можно моделировать при помощи трансдьюсера, однако эта работа осталась незамеченной.

В рамках двухуровневой фонологии/морфологии:

- правила --- посимвольные ограничения на поверхностное представление, которые применяются параллельно.
- правила могут оперировать единицами глубинного представления, поверхностного представления или одновременно обоих.

Использование ограничений, вместо правил, чуть позже возникла в фонологии в виде Теории оптимальности (OT, [@prince1994]), однако в рамках OT предпалагаются, что ограничения носят универсальный характер и есть во всех языках, в то время, как ограничения двухуровневой фонологии/морфологии --- имеют частный внутриязыковой характер.

## Программа `twol`

В данном разделе мы будем обсуждать синтаксис `twol`. Данный раздел основан на [@beesley2003].

## Техническое введение

Мы будем использовать программу `hfst-twolc`. Чтобы избежать сложностей на начальных этапах курса, мы решили вначале познакомиться с синтаксисом `twol` и попробовать описывать разные языковые явления, не затрудняя всех установкой и запуском у себя на компьютере.

- Для начала работы следует, как и раньше, скачать `Makefile`:

```{{shell}}
$ curl https://raw.githubusercontent.com/agricolamz/2025_morphological_transducers/refs/heads/main/task_tests/Makefile -o Makefile; make
```

- дальше, как и раньше, следует создадать в коллабе или у себя на компьютере (если у вас Linux), файл с названием `task.lexd`. В Google Colab для этого достаточно вставить первой строкой кодового блока `%%writefile task.lexd`. Вот пример такого файла:

```{{lexd}}
PATTERNS
Noun (Suffix[-adj] | (Suffix[adj] Inflection))?

LEXICON Noun
ночь
печь

LEXICON Suffix
<dim>:ка
<adj>:н[adj]

LEXICON Inflection
<m><sg><nom>:ой
```

- нововведением является возможность создания файла с названием `task.twol`, в котором будет содержаться код для обработки (мор)фонологии. Не забудьте вставить `%%writefile task.twol` в Google Colab. Вот пример такого файла:

```{{twol}}
Alphabet
  а е й к н о п ч ь ь:0;

Rules

"чк чн пишется без ь"
ь:0 <=> _ к;
        _ н;
```

- После того, как вы установили нужные программы и создали файлы, как и раньше, можно посмотреть формы и разборы, которые генерируются трансдьюсером (не забудьте поставить восклицательный знак перед `make` в Google Colab):

```{{shell}}
$ make forms

ночь<dim>:ночка
ночь<adj><m><sg><nom>:ночной
ночь
печь<dim>:печка
печь<adj><m><sg><nom>:печной
печь
```

- Кроме того можно посмотреть анализ/генерацию конкретных форм (не забудьте поставить восклицательный знак перед `make` в Google Colab):

```{{shell}}
$ make analysis FORM="печка"

hfst-lookup: Warning: It is not possible to perform fast lookups with OpenFST, std arc, tropical semiring format automata.
Using HFST basic transducer format and performing slow lookups
> печка	печь<dim>	0,000000
```

```{{shell}}
$ make generation FORM="ночь<adj><m><sg><nom>"

hfst-lookup: Warning: It is not possible to perform fast lookups with OpenFST, std arc, tropical semiring format automata.
Using HFST basic transducer format and performing slow lookups
> ночь<adj><m><sg><nom>	ночной	0,000000
```

- Как и раньше, получившийся трансдьюсер можно протестировать:

```{{shell}}
$ make test_03_01
```

::: {.callout-note}

###### Задание 03_03

В [@itkin07: 118] описывается чередование *н*~*н'* в русском языке. Попробуйте написать трансдьюсор, моделирующий следующие формы:  

| nom.sg    | dat.sg     | ins.pl      | gen.pl     |
|-----------|------------|-------------|------------|
| _башня_   | _башней_   | _башнями_   | _башен_    |
| _песня_   | _песней_   | _песнями_   | _песен_    |
| _бойня_   | _бойней_   | _бойнями_   | _боен_     |
| _деревня_ | _деревней_ | _деревнями_ | _деревень_ |
| _кухня_   | _кухней_   | _кухнями_   | _кухонь_   |
| _Таня_    | _Таней_    | _Танями_    | _Тань_     |

:::

## Примеры чередований

- ассимиляция
- диссимиляция
- гармония
- ослабление
- усиление
- фузия
- расщепление
- элизия
- эпентеза
- чеширизация
- метатеза
- редупликация
