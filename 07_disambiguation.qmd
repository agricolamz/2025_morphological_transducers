# Введение в `CG3`: разрешение морфологической неоднозначности

## Разрешение морфологической неоднозначности

...

Парадигма Constraint grammar (CG) [@karlsson1995; @bick15] --- это правиловая процедурная система обработки текста, позволяющая решать достаточно большой набор разнообразных задач, такие как

- разрешение неоднозначности;
- приписывание тэгов, например, синтаксических ролей;
- разрешение анафоры;
- построение деревьев зависимостей;
- и многие другие.

Отмечу неожиданное преимущество правиловых фреймворков: их достаточно легко превращать в текст, объясняющий процедуру. Для правил CG была сделана такая попытка в работе [@swanson25].

## `VISL CG3`

В наших лекциях для разрешения морфологической неоднозначности мы будем использовать `VISL CG3`. `VISL CG3` --- это программа для работы в CG. `VISL` (Visual Interactive Syntax Learning) --- подпроект датской компании GrammarSoft ApS, а `CG3` обозначает новую, третью, версию реализации парадигмы. Чтобы установить достаточно следующих команд.

```{{shell}}
$ curl -s https://apertium.projectjj.com/apt/install-nightly.sh | sudo bash
$ sudo apt-get install cg3
```

Первая команда добавляет в операционную систему новый источник программ, он такой же как и для команд `lexd` и `twol`. Вторая команда --- стандартный способ установить программу. У программы есть большая  [документация](https://edu.visl.dk/cg3/chunked/index.html), но начинается она со следующего предостережения:

>  This manual should be regarded as a guideline. Some of the features or functionality described is either not implemented yet, or does not work exactly as advertised. A good place to see what is and is not implemented is to run the regression test suite as the test names are indicative of features. The individual tests are also good starting points to find examples on how a specific feature works. 

## Первый пример

Рассмотрим такой трансдьюсер, записанный в `example.lexd`:

```{python}
!cat examples/07_example.lexd
```

Мы его можем скомпилировать в оптимизированный:

```{{shell}}
$ lexd example.lexd | hfst-txt2fst | hfst-invert | hfst-fst2fst -O -o analyzer.hfstol
```

```{python}
!lexd examples/07_example.lexd | hfst-txt2fst | hfst-invert | hfst-fst2fst -O -o examples/analyzer.hfstol
```

Подадим предложение на вход процессору:

```{{shell}}
$ echo "я играл" | hfst-proc analyzer.hfstol
```

```{python}
!echo "я играл" | hfst-proc examples/analyzer.hfstol
```

Удобнее читать в другом формате, так что добавим флаг `-C`:

```{{shell}}
$ echo "я играл" | hfst-proc -C analyzer.hfstol
```

```{python}
!echo "я играл" | hfst-proc -C examples/analyzer.hfstol
```

Мы видим, что форма *играл* имеет три возможных разбора. Кроме того мы видим, что два из разборов точно неправильные, что очевидно, если посмотреть на предыдущее слово. Для того чтобы это сделать создадим следующий файл `cg_rules_1.rlx`:

```{python}
!cat examples/07_cg_rules_1.rlx
```

Применим написанный файл к нашему трансдьюсеру:

```{{shell}}
$ echo "я играл" | hfst-proc -C analyzer.hfstol | vislcg3 -g cg_rules_1.rlx
```

```{python}
!echo "я играл" | hfst-proc -C examples/analyzer.hfstol | vislcg3 -g examples/07_cg_rules_1.rlx
```

Таким образом мы избавились от нескольких ненужных разборов. В следующих разделах мы углубимся в возможности `cg3`.

## `vislcg3`

`vislcg3` --- это основная программа, которую мы будем запускать. Она по умолчанию угадывает формат, в котором ей поступают данные на вход и отдает в таком же формате.

```{python}
!rm -f examples/*.hfstol
```
