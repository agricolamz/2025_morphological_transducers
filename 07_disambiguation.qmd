# Введение в `cg3`: разрешение морфологической неоднозначности

## Разрешение морфологической неоднозначности

...

Парадигма Constraint grammar (CG) [@karlsson1995]...

## `VISL CG3`

В наших лекциях для разрешения морфологической неоднозначности мы будем использовать `VISL CG3`. `VISL CG3` --- это программа для работы в CG. `VISL` (Visual Interactive Syntax Learning) --- подпроект датской компании GrammarSoft ApS, а `CG3` обозначает новую, третью, версию реализации парадигмы. Чтобы установить достаточно следующих команд.

```{{shell}}
$ curl -s https://apertium.projectjj.com/apt/install-nightly.sh | sudo bash
$ sudo apt-get install cg3
```

Первая команда добавляет в операционную систему новый источник программ, он такой же как и для команд `lexd` и `twol`. Вторая команда --- стандартный способ установить программу. У программы есть большая  [документация](https://edu.visl.dk/cg3/chunked/index.html), но начинается она со следующего предостережения:

>  This manual should be regarded as a guideline. Some of the features or functionality described is either not implemented yet, or does not work exactly as advertised. A good place to see what is and is not implemented is to run the regression test suite as the test names are indicative of features. The individual tests are also good starting points to find examples on how a specific feature works. 

Важно также сказать, что CG позволяет не только разрешать неоднозначность, но и 

- приписывать тэги, например, синтаксические роли;
- разрешать анафору;
- строить деревья зависимостей;
- и, наверное, многое другое.

## Первый пример

Рассмотрим такой трансдьюсер, записанный в `example.lexd`:

```{python}
!cat examples/07_example.lexd
```

Мы его можем скомпилировать в оптимизированный:

```{{shell}}
lexd example.lexd | hfst-txt2fst | hfst-invert | hfst-fst2fst -O -o analyzer.hfstol
```

```{python}
!lexd examples/07_example.lexd | hfst-txt2fst | hfst-invert | hfst-fst2fst -O -o examples/analyzer.hfstol
```

Подадим предложение на вход процессору:

```{{shell}}
echo "я играл" | hfst-proc analyzer.hfstol
```

```{python}
!echo "я играл" | hfst-proc examples/analyzer.hfstol
```

Удобнее читать в другом формате, так что добавим флаг `-C`:

```{{shell}}
$ echo "я играл" | hfst-proc -C analyzer.hfstol
```

```{python}
!echo "я играл" | hfst-proc -C examples/analyzer.hfstol
```

Мы видим, что форма *играл* имеет три возможных разбора. Кроме того мы видим, что два из разборов точно неправильные, что очевидно, если посмотреть на предыдущее слово. Для того чтобы это сделать создадим следующий файл `cg_rules_1.rlx`:

```{python}
!cat examples/07_cg_rules_1.rlx
```

Скомпилируем бинарный файл:

```{{shell}}
$ cg-comp cg_rules_1.rlx cg_rules_1.rlx.bin 
```

```{python}
!cg-comp examples/07_cg_rules_1.rlx examples/cg_rules_1.rlx.bin 
```

Применим получившийся бинарный файл к нашему трансдьюсеру:

```{{shell}}
$ echo "я играл" | hfst-proc analyzer.hfstol | cg-proc cg_rules_1.rlx.bin
```

```{python}
!echo "я играл" | hfst-proc examples/analyzer.hfstol | cg-proc examples/cg_rules_1.rlx.bin
```

В таком виде не очень удобно читать, так что добавим еще форматирование:

```{{shell}}
$ echo "я играл" | hfst-proc analyzer.hfstol | cg-proc cg_rules_1.rlx.bin | cg-conv -C
```

```{python}
!echo "я играл" | hfst-proc examples/analyzer.hfstol | cg-proc examples/cg_rules_1.rlx.bin | cg-conv -C
```

Ура, мы разрешили морфологическую неоднозначность. В следующих разделах мы углубимся в возможности `cg3`.

```{python}
!rm -f examples/*.hfstol examples/*.bin
```
