# Введение в `cg3`: разрешение морфологической неоднозначности

## Constraint grammar

Парадигма Constraint grammar (CG) [@karlsson1995; @bick15] --- это правиловая процедурная система обработки текста, позволяющая решать достаточно большой набор разнообразных задач, такие как

- разрешение неоднозначности;
- приписывание тэгов, например, синтаксических ролей;
- разрешение анафоры;
- построение деревьев зависимостей;
- chunking --- выделение границ синтаксических единиц (без внутренней структуры, отношений вершины-зависимое и т. п.) [@bick2013];
- и многие другие.

CG разрабатывалась начиная с 1980-ых Фредом Кралссоном и другими в университете Хельсенки. С самого начала эта парадигма задумывалась как модуль, который работает с любым текстом на любом языке, так чтобы каждой входной единице сопоставляется некоторая выходная единица (включая пунктуацию и другие топографические особенности). Слово *constraint* в описании подчеркивает фильтрующую функцию, которую носит CG модуль: на вход мы подаем некоторый текст и морфологические разборы, а CG модуль удаляет, изменяет или модифицирует морфологические разборы.

Отмечу неожиданное преимущество правиловых фреймворков: их достаточно легко превращать в текст, объясняющий процедуру. Попытку сделать такое для правил CG можно посмотреть в следующей работе [@swanson25].

## `cg3`

В наших лекциях для разрешения морфологической неоднозначности мы будем использовать `cg3` (полное название `vislcg3`). `VISL` (Visual Interactive Syntax Learning) --- подпроект датской компании GrammarSoft ApS, а `CG3` обозначает новую, третью, версию реализации парадигмы. Чтобы установить достаточно следующих команд.

```{{shell}}
$ curl -s https://apertium.projectjj.com/apt/install-nightly.sh | sudo bash
$ sudo apt-get install cg3
```

Первая команда добавляет в операционную систему новый источник программ, он такой же как и для команд `lexd` и `twol`. Вторая команда --- стандартный способ установить программу. У программы есть большая [документация](https://edu.visl.dk/cg3/chunked/index.html), но начинается она со следующего предостережения:

> This manual should be regarded as a guideline. Some of the features or functionality described is either not implemented yet, or does not work exactly as advertised. A good place to see what is and is not implemented is to run the regression test suite as the test names are indicative of features. The individual tests are also good starting points to find examples on how a specific feature works. 

`cg3` по умолчанию угадывает формат, в котором ей поступают данные на вход и отдает в таком же формате. Однако есть и программы более узкого назначения:

- `cg-conv` --- программа для преобразования входных/выходных типов данных (например, между апертиумовским и CG) ;
- `cg-comp` компилирует файл CG правил в бинарный файл ;
- `cg-proc` обрабатывает входные данные при помощи файла CG правил или его бинарного варианта ;
- и некоторые другие.

В программе `cg3` достаточно много аргументов (см. `cg3 -h`), нам важно три:

- `-g` --- указывает файл с CG правилами ;
- `-I` --- файл для чтения вместо стандартного stdin ;
- `-O` --- файл для записи результата работы вместо стандартного stdout.

### Первый пример

Рассмотрим такой трансдьюсер, записанный в `example_1.lexd`:

```{python}
!cat examples/07_example_1.lexd
```

Мы его можем скомпилировать в оптимизированный:

```{{shell}}
$ lexd example_1.lexd | hfst-txt2fst | hfst-invert | hfst-fst2fst -O -o analyzer.hfstol
```

```{python}
!lexd examples/07_example_1.lexd | hfst-txt2fst | hfst-invert | hfst-fst2fst -O -o examples/analyzer.hfstol
```

Подадим предложение на вход процессору:

```{{shell}}
$ echo "Поезд едет в город." | hfst-proc analyzer.hfstol
```

```{python}
!echo "Поезд едет в город." | hfst-proc examples/analyzer.hfstol
```

Апертиумовский формат неудобно читать, так что добавим флаг `-C`, чтобы `hfst-proc` преобразовал получившееся в CG формат:

```{{shell}}
$ echo "Поезд едет в город." | hfst-proc -C analyzer.hfstol
```

```{python}
!echo "Поезд едет в город." | hfst-proc -C examples/analyzer.hfstol
```

Мы видим, что форма *город* имеет два возможных разбора. Кроме того мы видим, что один из разборов точно неправильный. Для того чтобы убрать ненужный разбор, создадим следующий файл `example_1.cg3`:

```{python}
!cat examples/07_example_1.cg3
```

Применим написанное правило к нашему трансдьюсеру:

```{{shell}}
$ echo "Поезд едет в город." | hfst-proc -C analyzer.hfstol | cg3 -g example_1.cg3
```

```{python}
!echo "Поезд едет в город." | hfst-proc -C examples/analyzer.hfstol | cg3 -g examples/07_example_1.cg3
```

Таким образом мы избавились от ненужного разбора. В следующих разделах мы углубимся в возможности `cg3`.

### Структура `.cg3` файла

Файлы с CG правилами принято записывать в файлы с расширениями `.cg3` или `.rlx`. В принципе никакой необходимой структуры такие файлы не предполагают, однако для читаемости имеет смысл делить логические фрагменты на разделы `SECTION`. Такие разделы могут иметь названия. Кроме того можно вводить специальные разделы `BEFORE-SECTIONS` и `AFTER-SECTIONS`, которые будут запускаться до и перед разделами `SECTION`. Также для отлаживания кода полезно знать команду `END`, после которой правила из файла не читаются. Содержание файла обычно заключается в наборе команд для декларации переменных при помощи команд `LIST` и `SET` и манипуляции 

- с тегами;
- чтениями;
- зависимостями;
- отношениями;
- единицами анализа (в формализме CG их называют *когортами*, *cohort*);
- и др.

Комментарии отделяются при помощи знака `#`.

Кроме того, есть некоторый [набор настроек](https://edu.visl.dk/cg3/chunked/grammar.html#grammar-options) для чтения грамматики, который добавляется при помощи команды `OPTIONS`.

Вот фрагменты искусственного `.сg3` файла, который приводиться здесь для иллюстрации:

```{{cg3}}
DELIMITERS = "<svb>" ;
OPTIONS += addcohort-attach ;

<...>

# важный комментарий

LIST Det = art ;
LIST PRON = prde prps prn ;
SET Sem/Time = Month | Months | Year | Century | Season | Seasons | TimeOfDay ; 

<...>

SECTION                   # <1>

REMOVE Dat IF (NOT 0 Anim OR Cog OR Ant) (NOT 0 Pron) ;
SELECT Gen IF (0C N) (-1C A OR Det) ;

<...>

SECTION some-other-forms ; # <2>

REMOVE Imper IF (1C Fin) ;

<...>

```

1. Если раздел `SECTION` не поименована, то можно не ставить точки с запятой.
2. Если раздел `SECTION` поименован, то а) в названии не должно быть пробелов б) строка должна заканчиваться точкой с запятой.

### Раздел `DELIMITERS`

### Операции с тегами

Первая группа команд, которую мы рассмотрим, измененяет теги.

- `ADD` --- добавляет тэг к набору тегов, **разрешая** в дальнейшем одной из операций `MAP`, `ADD` или `REPLACE` работать с анализируемым чтением ;

```
ADD <tags> [BEFORE|AFTER <tags>] <target> [contextual_tests] ;
```

```{{shell}}
$ cat example_ADD.cg3
```

```{python}
!cat examples/07_example_ADD.cg3
```

```{{shell}}
$ echo "Поезд едет в город." | hfst-proc -C analyzer.hfstol | cg3 -g example_ADD.cg3
```

```{python}
!echo "Поезд едет в город." | hfst-proc -C examples/analyzer.hfstol | cg3 -g examples/07_example_ADD.cg3
```

- `MAP` --- добавляет тэг к набору тегов, **запрещая** в дальнейшем одной из операций `MAP`, `ADD` или `REPLACE` работать с анализируемым чтением ;

```
MAP <tags> [BEFORE|AFTER <tags>] <target> [contextual_tests] ;
```

```{{shell}}
$ cat example_MAP.cg3
```

```{python}
!cat examples/07_example_MAP.cg3
```

```{{shell}}
$ echo "Поезд едет в город." | hfst-proc -C analyzer.hfstol | cg3 -g example_MAP.cg3
```

```{python}
!echo "Поезд едет в город." | hfst-proc -C examples/analyzer.hfstol | cg3 -g examples/07_example_MAP.cg3
```

- `SUBSTITUTE` --- заменяет один набор тэгов на другой набор тэгов. Может быть сделана нулевая замена, для этого следует использовать знак `*`.

```
SUBSTITUTE <locate tags> <replacement tags> <target> [contextual_tests] ;
```

```{{shell}}
$ cat example_SUBSTITUTE.cg3
```

```{python}
!cat examples/07_example_SUBSTITUTE.cg3
```

```{{shell}}
$ echo "Поезд едет в город." | hfst-proc -C analyzer.hfstol | cg3 -g example_SUBSTITUTE.cg3
```

```{python}
!echo "Поезд едет в город." | hfst-proc -C examples/analyzer.hfstol | cg3 -g examples/07_example_SUBSTITUTE.cg3
```

- `REPLACE` --- оставляет только выделенный тэг, а остальные теги убирает, **запрещая** в дальнейшем одной из операций `MAP`, `ADD` или `REPLACE` работать с анализируемым чтением ;

```{{shell}}
$ cat example_REPLACE.cg3
```

```{python}
!cat examples/07_example_REPLACE.cg3
```

```{{shell}}
$ echo "Поезд едет в город." | hfst-proc -C analyzer.hfstol | cg3 -g example_REPLACE.cg3
```

```{python}
!echo "Поезд едет в город." | hfst-proc -C examples/analyzer.hfstol | cg3 -g examples/07_example_REPLACE.cg3
```

- `UNMAP` снимает блокирующее поведение команд `MAP` и `REPLACE`. По-умолчанию `UNMAP` работает только с единственными чтениями, но если хочется чтобы блокировка была снята с нескольких чтений одной формы, стоит добавить `UNSAFE`.

```
UNMAP <target> [contextual_tests] ;
```

```{{shell}}
$ cat example_UNMAP.cg3
```

```{python}
!cat examples/07_example_UNMAP.cg3
```

```{{shell}}
$ echo "Поезд едет в город." | hfst-proc -C analyzer.hfstol | cg3 -g example_UNMAP.cg3
```

```{python}
!echo "Поезд едет в город." | hfst-proc -C examples/analyzer.hfstol | cg3 -g examples/07_example_UNMAP.cg3
```

```{{shell}}
$ cat example_UNSAFE.cg3
```

```{python}
!cat examples/07_example_UNSAFE.cg3
```

```{{shell}}
$ echo "Поезд едет в город." | hfst-proc -C analyzer.hfstol | cg3 -g example_UNSAFE.cg3
```

```{python}
!echo "Поезд едет в город." | hfst-proc -C examples/analyzer.hfstol | cg3 -g examples/07_example_UNSAFE.cg3
```

- `APPEND`

```
APPEND <tags> <target> [contextual_tests] ;
```

- `COPY`

```
COPY <extra tags> [EXCEPT <except tags>] [BEFORE|AFTER <tags>] <target> [contextual_tests] ;
```

### Операции с чтениями

- `SELECT`

```
SELECT <target> [contextual_tests] ;
```

- `REMOVE`

```
REMOVE <target> [contextual_tests] ;
```

- `IFF`

```
IFF <target> [contextual_tests] ;
```

- `RESTORE`

```
RESTORE <restore_target> <target> [contextual_tests] ;
```

### Операции со списками: `LIST` и `SET`

### Позиция

```{python}
!rm -f examples/*.hfstol
```
